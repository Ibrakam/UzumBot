import asyncio
import logging
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InputMediaPhoto
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_KEY = "mmldJYh2h33pboUakTFsohCOa1VLR5KCP4OBW0j5+y0="
TOKEN = '7279266289:AAEZhEkpNREbkFUp6DELAlWoKXEjFvc8x4Y'
CHECK_INTERVAL = 60
PRODUCT_IDS = set()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
CHAT_ID = None


def get_orders(api_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API"""
    url = "https://api-seller.uzum.uz/api/seller-openapi/v1/fbs/orders"
    params = {"shopIds": "60348", "status": "PACKING"}
    headers = {"Authorization": f"{api_key}"}

    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None


def format_order_message(order):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    order_id = order.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    deliver_until = order.get('deliverUntil', '')
    formatted_date = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    if deliver_until:
        if isinstance(deliver_until, str):
            try:
                deliver_date = datetime.fromisoformat(deliver_until.replace('Z', '+00:00'))
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except ValueError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {deliver_until}")
        elif isinstance(deliver_until, int):
            try:
                deliver_date = datetime.fromtimestamp(deliver_until / 1000)
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except:
                try:
                    deliver_date = datetime.fromtimestamp(deliver_until)
                    formatted_date = deliver_date.strftime('%d.%m.%Y')
                except:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å timestamp {deliver_until}")

    items_info = []
    total_amount = 0
    for item in order.get('orderItems', []):
        product_title = item.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä') or item.get('productTitle', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
        sku_char_value = item.get('skuCharValue', '')
        if sku_char_value:
            product_title += f" ({sku_char_value})"
        amount = item.get('amount', 0)
        total_amount += amount

        image_url = None
        product_image = item.get('photo', {})
        if 'photo' in product_image:
            photo_data = product_image.get('photo', {})
            try:
                if photo_data and '800' in photo_data and 'high' in photo_data['800']:
                    image_url = photo_data['800']['high']
            except (KeyError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

        if not image_url and item.get('productImage'):
            try:
                product_image = item.get('productImage', {})
                if 'photo' in product_image:
                    photo_data = product_image.get('photo', {})
                    for size in ['800', '720', '540', '480', '240']:
                        if size in photo_data and 'high' in photo_data[size]:
                            image_url = photo_data[size]['high']
                            break
            except (KeyError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ productImage: {e}")

        items_info.append({'title': product_title, 'amount': amount, 'image_url': image_url})

    message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\n\n"
    for idx, item in enumerate(items_info, 1):
        message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
    message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {formatted_date}\n"
    message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {total_amount} —à—Ç.\n"
    message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order_id}"

    valid_image_urls = [item['image_url'] for item in items_info if item['image_url']]
    return message, valid_image_urls, items_info


async def send_telegram_notification(chat_id, message_text, image_urls=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        if image_urls and len(image_urls) > 0:
            if len(image_urls) == 1:
                await bot.send_photo(chat_id, photo=image_urls[0], caption=message_text, parse_mode='Markdown')
            else:
                media_group = [InputMediaPhoto(media=image_urls[0], caption=message_text, parse_mode='Markdown')]
                for url in image_urls[1:]:
                    if url:
                        media_group.append(InputMediaPhoto(media=url))
                await bot.send_media_group(chat_id=chat_id, media=media_group)
        else:
            await bot.send_message(chat_id, text=message_text, parse_mode='Markdown')
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        try:
            await bot.send_message(chat_id, text=f"{message_text}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                   parse_mode='Markdown')
            return True
        except Exception as text_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {text_error}")
            return False


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ chat_id"""
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—é–¥–∞.")


@dp.message(Command("check"))
async def check_new_orders_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    orders_data = get_orders(API_KEY)
    if not orders_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    if not orders:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    for order in orders:
        message_text, image_urls, items_info = format_order_message(order)
        success = await send_telegram_notification(message.chat.id, message_text, image_urls)
        if success:
            await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order.get('id')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order.get('id')}")


async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    global CHAT_ID, PRODUCT_IDS
    if CHAT_ID is None:
        logger.warning("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    orders_data = get_orders(API_KEY)
    if not orders_data:
        await bot.send_message(CHAT_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    if not orders:
        return

    for order in orders:
        message_text, image_urls, items_info = format_order_message(order)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        new_items = []
        for item in items_info:
            product_title = item['title']
            if product_title not in PRODUCT_IDS:  # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–æ–≤—ã–π
                new_items.append(item)
                PRODUCT_IDS.add(product_title)  # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫

        if new_items:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            new_message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.get('id')}*\n\n"
            for idx, item in enumerate(new_items, 1):
                new_message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
            new_message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {datetime.now().strftime('%d.%m.%Y')}\n"
            new_message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {len(new_items)} —à—Ç.\n"
            new_message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order.get('id')}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            valid_image_urls = [item['image_url'] for item in new_items if item['image_url']]
            await send_telegram_notification(CHAT_ID, new_message, valid_image_urls)


async def clear_product_ids():
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤"""
    global PRODUCT_IDS
    logger.info("–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
    PRODUCT_IDS.clear()


@dp.message(Command("report"))
async def manual_daily_report(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
    await daily_report()
    # await message.answer("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


async def split_and_send_message(chat_id, text, max_length=4096):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ.
    :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    :param max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096).
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    for part in parts:
        await bot.send_message(chat_id, text=part, parse_mode='Markdown')
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏


async def daily_report():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ä—É—á–Ω–æ–π)"""
    global CHAT_ID
    if CHAT_ID is None:
        logger.warning("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        return

    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    orders_data = get_orders(API_KEY)
    if not orders_data:
        await bot.send_message(CHAT_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    total_orders = len(orders)
    total_items = 0
    detailed_orders = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö

    for order in orders:
        order_id = order.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        items_info = []

        for item in order.get('orderItems', []):
            product_title = item.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä') or item.get('productTitle', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            amount = item.get('amount', 0)
            total_items += amount
            items_info.append(f"   - {product_title} ({amount} —à—Ç.)")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if items_info:
            detailed_orders.append(f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}:\n" + "\n".join(items_info))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    report_message = (
        f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å: {total_orders}\n"
        f"üõçÔ∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    if detailed_orders:
        report_message += "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*\n" + "\n\n".join(detailed_orders)
    else:
        report_message += "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–∞—Å—Ç—è–º–∏
    if len(report_message) > 4096:
        logger.info("–û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ —á–∞—Å—Ç—è–º–∏...")
        await split_and_send_message(CHAT_ID, report_message)
    else:
        await bot.send_message(CHAT_ID, text=report_message, parse_mode='Markdown')

    logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)

    scheduler = AsyncIOScheduler(timezone=timezone('Asia/Tashkent'))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    scheduler.add_job(
        periodic_check,
        "interval",
        seconds=CHECK_INTERVAL
    )
    scheduler.add_job(
        clear_product_ids,
        "interval",
        hours=48  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤
    )
    scheduler.add_job(
        daily_report,
        "cron",
        hour=16, minute=0  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 16:00 –ø–æ —Ç–∞—à–∫–µ–Ω—Ç—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    )
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
