import asyncio
import logging
import requests
from datetime import datetime, date, timezone, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InputMediaPhoto
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

from sqlalchemy import create_engine, Column, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

engine = create_engine('sqlite:///orders.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_KEY = "mmldJYh2h33pboUakTFsohCOa1VLR5KCP4OBW0j5+y0="
TOKEN = '7679981523:AAH4dRq6FRWea24l9jd6ZB4ZpK48eQXuV64'
CHECK_INTERVAL = 60

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
CHAT_ID = None


class SentOrder(Base):
    __tablename__ = 'sent_orders'
    order_key = Column(String, primary_key=True)
    sent_time = Column(DateTime, default=datetime.utcnow)


Base.metadata.create_all(engine)


def is_order_sent(order_key):
    session = Session()
    exists = session.query(SentOrder).filter_by(order_key=order_key).first() is not None
    logger.info(f"–ó–∞–∫–∞–∑ {order_key} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {exists}")
    session.close()
    return exists


def save_order_key(order_key):
    session = Session()
    if not session.query(SentOrder).filter_by(order_key=order_key).first():
        session.add(SentOrder(order_key=order_key))
        session.commit()
    session.close()


def cleanup_old_orders_sqlalchemy():
    session = Session()
    threshold = datetime.utcnow() - timedelta(days=7)
    session.query(SentOrder).filter(SentOrder.sent_time <= threshold).delete()
    session.commit()
    session.close()


def get_orders(api_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API"""
    url = "https://api-seller.uzum.uz/api/seller-openapi/v1/fbs/orders"
    params = {"shopIds": "60348", "status": "PACKING"}
    headers = {"Authorization": f"{api_key}"}

    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None


def format_order_message(order):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    order_id = order.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    deliver_until = order.get('deliverUntil', '')
    formatted_date = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    if deliver_until:
        if isinstance(deliver_until, str):
            try:
                deliver_date = datetime.fromisoformat(deliver_until.replace('Z', '+00:00'))
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except ValueError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {deliver_until}")
        elif isinstance(deliver_until, int):
            try:
                deliver_date = datetime.fromtimestamp(deliver_until / 1000)
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except:
                try:
                    deliver_date = datetime.fromtimestamp(deliver_until)
                    formatted_date = deliver_date.strftime('%d.%m.%Y')
                except:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å timestamp {deliver_until}")

    items_info = []
    total_amount = 0
    valid_image_urls = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–¥–µ—Å—å

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    for item in order.get('orderItems', []):
        product_title = item.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä') or item.get('productTitle', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
        sku_char_value = item.get('skuCharValue', '')
        if sku_char_value:
            product_title += f" ({sku_char_value})"
        amount = item.get('amount', 0)
        total_amount += amount

        image_url = None
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç photo
        if item.get('photo') and isinstance(item.get('photo'), dict):
            product_image = item.get('photo')
            if 'photo' in product_image and isinstance(product_image.get('photo'), dict):
                photo_data = product_image.get('photo')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é)
                for size in ['800', '720', '540', '480', '240']:
                    if size in photo_data and 'high' in photo_data[size]:
                        image_url = photo_data[size]['high']
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                        break

        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ photo, –∏—â–µ–º –≤ productImage
        if not image_url and item.get('productImage'):
            try:
                product_image = item.get('productImage')
                if 'photo' in product_image:
                    photo_data = product_image.get('photo')
                    for size in ['800', '720', '540', '480', '240']:
                        if size in photo_data and 'high' in photo_data[size]:
                            image_url = photo_data[size]['high']
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ productImage: {image_url}")
                            break
            except (KeyError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ productImage: {e}")

        if image_url:
            valid_image_urls.append(image_url)

        items_info.append({
            'title': product_title,
            'amount': amount,
            'image_url': image_url,
            'skuCharValue': sku_char_value
        })

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    logger.info(f"–ó–∞–∫–∞–∑ {order_id}: –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items_info)}, –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(valid_image_urls)}")

    message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\n\n"
    for idx, item in enumerate(items_info, 1):
        message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
    message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {formatted_date}\n"
    message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {total_amount} —à—Ç.\n"
    message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order_id}"

    return message, valid_image_urls, items_info


async def send_telegram_notification(chat_id, message_text, image_urls=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –£—Å—Ç—Ä–∞–Ω—è–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Ä–ª–æ–≤
        valid_urls = []
        if image_urls:
            for url in image_urls:
                if url and isinstance(url, str) and url.strip():
                    valid_urls.append(url)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {len(valid_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

        if valid_urls:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã)
            valid_urls = valid_urls[:10]

            if len(valid_urls) == 1:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {valid_urls[0]}")
                await bot.send_photo(chat_id, photo=valid_urls[0], caption=message_text, parse_mode='Markdown')
            else:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ {len(valid_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media_group = [InputMediaPhoto(media=valid_urls[0], caption=message_text, parse_mode='Markdown')]
                for url in valid_urls[1:]:
                    media_group.append(InputMediaPhoto(media=url))

                try:
                    await bot.send_media_group(chat_id=chat_id, media=media_group)
                except Exception as media_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_error}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç
                    await bot.send_message(chat_id, text=message_text, parse_mode='Markdown')
                    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    for url in valid_urls:
                        try:
                            await asyncio.sleep(1)
                            await bot.send_photo(chat_id, photo=url)
                        except Exception:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {url}")
        else:
            await bot.send_message(chat_id, text=message_text, parse_mode='Markdown')

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await bot.send_message(chat_id,
                                   text=f"{message_text.replace('*', '')}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return True
        except Exception as text_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {text_error}")
            return False


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ chat_id"""
    global CHAT_ID
    CHAT_ID = message.chat.id
    logger.info(
        f"Chat ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {CHAT_ID}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}")
    await message.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—é–¥–∞.")


@dp.message(Command("check"))
async def check_new_orders_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤...")

    orders_data = get_orders(API_KEY)
    if not orders_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    if not orders:
        await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    await message.answer(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤. –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")

    for order in orders:
        order_id = order.get('id')
        message_text, image_urls, items_info = format_order_message(order)

        await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} —Å {len(image_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await send_telegram_notification(message.chat.id, message_text, image_urls)

            if success:
                await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
            await asyncio.sleep(3)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {str(e)[:100]}...")
            await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ñ–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    global CHAT_ID
    if CHAT_ID is None:
        logger.warning("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    orders_data = get_orders(API_KEY)
    if not orders_data:
        await bot.send_message(CHAT_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    if not orders:
        logger.info("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for order in orders:
        order_id = order.get('id')
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        message_text, image_urls, items_info = format_order_message(order)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        new_order = False
        for item in items_info:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            sku = item.get('skuCharValue', '')
            unique_key = f"{order_id}"

            if not is_order_sent(unique_key):
                # –ù–∞—à–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                new_order = True
                save_order_key(unique_key)
                logger.info(f"–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {item['title']} (SKU: {sku})")

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if new_order:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_id} —Å {len(image_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await send_telegram_notification(CHAT_ID, message_text, image_urls)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            await asyncio.sleep(3)  # 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è


# –ß—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
# from aiogram.types import InputMediaPhoto
# import asyncio
# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


@dp.message(Command("report"))
async def manual_daily_report(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
    await daily_report()
    # await message.answer("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


async def daily_report():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ä—É—á–Ω–æ–π)"""
    global CHAT_ID
    if CHAT_ID is None:
        logger.warning("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        return

    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    orders_data = get_orders(API_KEY)
    if not orders_data:
        await bot.send_message(
            CHAT_ID,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.",
            parse_mode=None
        )
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    today = date.today()
    today_orders = []

    for order in orders:
        created_at = order.get('dateCreated')
        if not created_at:
            logger.warning("–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞.")
            continue

        order_date = None
        # 1) –ß–∏—Å–ª–æ–≤–æ–π —Ç–∞–π–º—Å—Ç–∞–º–ø (ms)
        if isinstance(created_at, (int, float)) or (isinstance(created_at, str) and created_at.isdigit()):
            try:
                ts = int(created_at) / 1000
                # UTC-–≤—Ä–µ–º—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                order_date = datetime.utcfromtimestamp(ts).date()
                # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                # order_date = datetime.fromtimestamp(ts).date()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º—Å—Ç–∞–º–ø {created_at}: {e}")

        # 2) ISO-—Å—Ç—Ä–æ–∫–∞
        else:
            try:
                s = str(created_at)
                if s.endswith("Z"):
                    s = s[:-1] + "+00:00"
                order_date = datetime.fromisoformat(s).date()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ {created_at}: {e}")

        if order_date == today:
            today_orders.append(order)

    total_orders = len(today_orders)
    total_items = 0
    detailed_orders = []

    for order in today_orders:
        order_id = order.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        items_info = []
        for item in order.get('orderItems', []):
            title = item.get('title') or item.get('productTitle') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
            title = sanitize_text(title)
            amount = item.get('amount', 0)
            total_items += amount
            items_info.append(f"   - {title} ({amount} —à—Ç.)")
        if items_info:
            detailed_orders.append(f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}:\n" + "\n".join(items_info))

    report_message = (
        f"üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_orders}\n"
        f"üõçÔ∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n\n"
    )
    if detailed_orders:
        report_message += "üìã –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í:\n" + "\n\n".join(detailed_orders)
    else:
        report_message += "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è."

    logger.debug(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(report_message)}")

    try:
        if len(report_message) > 4096:
            logger.info("–û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ —á–∞—Å—Ç—è–º–∏...")
            await split_and_send_message(CHAT_ID, report_message)
        else:
            await bot.send_message(
                CHAT_ID,
                text=report_message,
                parse_mode=None
            )
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        simple_message = f"üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢: {total_orders} –∑–∞–∫–∞–∑–æ–≤, {total_items} —Ç–æ–≤–∞—Ä–æ–≤."
        await bot.send_message(
            CHAT_ID,
            text=simple_message,
            parse_mode=None
        )


def sanitize_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–∞–∑–º–µ—Ç–∫–∞
    problematic_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in problematic_chars:
        text = text.replace(char, ' ')
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def split_and_send_message(chat_id, message, max_length=4000):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    import asyncio

    if len(message) <= max_length:
        # –í–ê–ñ–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º parse_mode=None
        await bot.send_message(chat_id, text=message, parse_mode=None)
        return

    parts = []
    current_part = ""
    paragraphs = message.split("\n\n")

    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–µ–±–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(paragraph) > max_length:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = paragraph.split("\n")
            for line in lines:
                if len(current_part) + len(line) + 1 <= max_length:
                    if current_part:
                        current_part += "\n"
                    current_part += line
                else:
                    parts.append(current_part)
                    current_part = line
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ, –µ—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            if len(current_part) + len(paragraph) + 2 <= max_length:
                if current_part:
                    current_part += "\n\n"
                current_part += paragraph
            else:
                parts.append(current_part)
                current_part = paragraph

    if current_part:
        parts.append(current_part)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    for i, part in enumerate(parts):
        try:
            # –í–ê–ñ–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º parse_mode=None
            await bot.send_message(chat_id, text=part, parse_mode=None)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i + 1}: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è [{i + 1}]: {part[:50]}...")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)

    scheduler = AsyncIOScheduler(timezone=timezone('Asia/Tashkent'))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    scheduler.add_job(
        periodic_check,
        "interval",
        seconds=CHECK_INTERVAL
    )
    scheduler.add_job(
        cleanup_old_orders_sqlalchemy,
        "interval",
        hours=24
    )
    scheduler.add_job(
        daily_report,
        "cron",
        hour=16, minute=0  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 16:00 –ø–æ —Ç–∞—à–∫–µ–Ω—Ç—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    )
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
