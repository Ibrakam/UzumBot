import asyncio
import logging
import requests
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InputMediaPhoto
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from sqlalchemy import Column, String, Time, DateTime, Integer, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_KEY = "mmldJYh2h33pboUakTFsohCOa1VLR5KCP4OBW0j5+y0="
TOKEN = '7279266289:AAEZhEkpNREbkFUp6DELAlWoKXEjFvc8x4Y'
CHECK_INTERVAL = 60
PRODUCT_IDS = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
CHAT_ID = None

Base = declarative_base()


class UserConfig(Base):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - chat_id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
    - api_key: API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
    - report_time: –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    - updated_at: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    """
    __tablename__ = 'user_config'

    id = Column(Integer, primary_key=True)
    chat_id = Column(String(50), unique=True, nullable=False)
    api_key = Column(String(255), nullable=False)
    report_time = Column(Time, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __repr__(self):
        return f"<UserConfig(chat_id='{self.chat_id}', api_key='{self.api_key}', report_time='{self.report_time}')>"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite)
engine = create_engine('sqlite:///bot_config.db', echo=False)
SessionLocal = sessionmaker(bind=engine)
Base.metadata.create_all(engine)


def get_session():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î."""
    return SessionLocal()


def get_user_config(chat_id: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id."""
    session = get_session()
    config = session.query(UserConfig).filter(UserConfig.chat_id == chat_id).first()
    session.close()
    return config


def save_user_config(chat_id: str, api_key: str, report_time: time):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    session = get_session()
    config = session.query(UserConfig).filter(UserConfig.chat_id == chat_id).first()
    if config:
        config.api_key = api_key
        config.report_time = report_time
    else:
        config = UserConfig(chat_id=chat_id, api_key=api_key, report_time=report_time)
        session.add(config)
    session.commit()
    session.close()


# ---------------------------- FSM: –°–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------------------------

class ConfigStates(StatesGroup):
    waiting_for_api_key = State()
    waiting_for_report_time = State()


# ---------------------------- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ----------------------------

def get_orders(api_key: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ URL –∑–∞–¥–∞—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏).
    """
    url = "https://api-seller.uzum.uz/api/seller-openapi/v1/fbs/orders"
    params = {"shopIds": "60348", "status": "PACKING"}
    headers = {"Authorization": f"{api_key}"}

    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None


def format_order_message(order):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ.
    –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º.
    """
    order_id = order.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    deliver_until = order.get('deliverUntil', '')
    formatted_date = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    if deliver_until:
        if isinstance(deliver_until, str):
            try:
                deliver_date = datetime.fromisoformat(deliver_until.replace('Z', '+00:00'))
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except ValueError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {deliver_until}")
        elif isinstance(deliver_until, int):
            try:
                deliver_date = datetime.fromtimestamp(deliver_until / 1000)
                formatted_date = deliver_date.strftime('%d.%m.%Y')
            except Exception:
                try:
                    deliver_date = datetime.fromtimestamp(deliver_until)
                    formatted_date = deliver_date.strftime('%d.%m.%Y')
                except Exception:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å timestamp {deliver_until}")

    items_info = []
    total_amount = 0
    for item in order.get('orderItems', []):
        product_title = item.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä') or item.get('productTitle', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
        sku_char_value = item.get('skuCharValue', '')
        if sku_char_value:
            product_title += f" ({sku_char_value})"
        amount = item.get('amount', 0)
        total_amount += amount

        image_url = None
        product_image = item.get('photo', {})
        if 'photo' in product_image:
            photo_data = product_image.get('photo', {})
            try:
                if photo_data and '800' in photo_data and 'high' in photo_data['800']:
                    image_url = photo_data['800']['high']
            except (KeyError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

        if not image_url and item.get('productImage'):
            try:
                product_image = item.get('productImage', {})
                if 'photo' in product_image:
                    photo_data = product_image.get('photo', {})
                    for size in ['800', '720', '540', '480', '240']:
                        if size in photo_data and 'high' in photo_data[size]:
                            image_url = photo_data[size]['high']
                            break
            except (KeyError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ productImage: {e}")

        items_info.append({'title': product_title, 'amount': amount, 'image_url': image_url})

    message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\n\n"
    for idx, item in enumerate(items_info, 1):
        message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
    message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {formatted_date}\n"
    message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {total_amount} —à—Ç.\n"
    message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order_id}"

    valid_image_urls = [item['image_url'] for item in items_info if item['image_url']]
    return message, valid_image_urls, items_info


async def send_telegram_notification(chat_id, message_text, image_urls=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∏–Ω–∞—á–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç.
    """
    try:
        if image_urls and len(image_urls) > 0:
            if len(image_urls) == 1:
                await bot.send_photo(chat_id, photo=image_urls[0], caption=message_text, parse_mode='Markdown')
            else:
                media_group = [types.InputMediaPhoto(media=image_urls[0], caption=message_text, parse_mode='Markdown')]
                for url in image_urls[1:]:
                    if url:
                        media_group.append(types.InputMediaPhoto(media=url))
                await bot.send_media_group(chat_id=chat_id, media=media_group)
        else:
            await bot.send_message(chat_id, text=message_text, parse_mode='Markdown')
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        try:
            await bot.send_message(chat_id, text=f"{message_text}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                   parse_mode='Markdown')
            return True
        except Exception as text_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {text_error}")
            return False


async def clear_product_ids():
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤"""
    global PRODUCT_IDS
    logger.info("–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
    PRODUCT_IDS.clear()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º,
    –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /config.
    """
    chat_id = str(message.chat.id)
    config = get_user_config(chat_id)
    if config:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                             "/config ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                             "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã\n"
                             "/report ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.\n"
                             "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –∏ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /config")


@dp.message(Command("config"))
async def cmd_config(message: types.Message,state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /config.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Å–Ω–∞—á–∞–ª–∞ API –∫–ª—é—á, –∑–∞—Ç–µ–º –≤—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á:")
    await state.set_state(ConfigStates.waiting_for_api_key)


@dp.message(ConfigStates.waiting_for_api_key)
async def process_api_key(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞.
    """
    api_key = message.text.strip()
    await state.update_data(api_key=api_key)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:00):")
    await state.set_state(ConfigStates.waiting_for_report_time)


@dp.message(ConfigStates.waiting_for_report_time)
async def process_report_time(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    time_str = message.text.strip()
    try:
        report_time = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:00):")
        return
    data = await state.get_data()
    api_key = data.get('api_key')
    chat_id = str(message.chat.id)
    save_user_config(chat_id, api_key, report_time)
    await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nAPI –∫–ª—é—á: {api_key}\n–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {report_time.strftime('%H:%M')}")
    await state.clear()


@dp.message(Command("check"))
async def cmd_check(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    chat_id = str(message.chat.id)
    config = get_user_config(chat_id)
    if not config:
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /config")
        return

    orders_data = get_orders(config.api_key)
    if not orders_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    if not orders:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    for order in orders:
        message_text, image_urls, _ = format_order_message(order)
        success = await send_telegram_notification(chat_id, message_text, image_urls)
        if success:
            await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order.get('id')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order.get('id')}")


@dp.message(Command("report"))
async def cmd_report(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = str(message.chat.id)
    config = get_user_config(chat_id)
    if not config:
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /config")
        return

    await send_daily_report(chat_id, config.api_key)


# ---------------------------- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ ----------------------------

async def send_daily_report(chat_id: str, api_key: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    orders_data = get_orders(api_key)
    if not orders_data:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return

    orders = orders_data.get('payload', {}).get('orders', [])
    total_orders = len(orders)
    total_items = 0

    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É
        _, _, items_info = format_order_message(order)
        new_items = []
        for item in items_info:
            product_key = item['title']  # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            if product_key not in PRODUCT_IDS:
                new_items.append(item)
                PRODUCT_IDS.add(product_key)

        if new_items:
            new_message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.get('id')}*\n\n"
            for idx, item in enumerate(new_items, 1):
                new_message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
            new_message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {datetime.now().strftime('%d.%m.%Y')}\n"
            new_message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {len(new_items)} —à—Ç.\n"
            new_message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order.get('id')}"
            valid_image_urls = [item['image_url'] for item in new_items if item['image_url']]
            await send_telegram_notification(chat_id, new_message, valid_image_urls)


async def periodic_check():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    session = get_session()
    configs = session.query(UserConfig).all()
    session.close()
    for config in configs:
        orders_data = get_orders(config.api_key)
        if not orders_data:
            await bot.send_message(config.chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö")
            continue
        orders = orders_data.get('payload', {}).get('orders', [])
        if not orders:
            continue
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É
            _, _, items_info = format_order_message(order)
            new_items = []
            for item in items_info:
                product_key = order.get('id')  # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                if product_key not in PRODUCT_IDS:
                    new_items.append(item)
                    PRODUCT_IDS.add(product_key)

            if new_items:
                new_message = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.get('id')}*\n\n"
                for idx, item in enumerate(new_items, 1):
                    new_message += f"{idx}. *{item['title']}*\n   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['amount']} —à—Ç.\n"
                new_message += f"\nüöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ:* {datetime.now().strftime('%d.%m.%Y')}\n"
                new_message += f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:* {len(new_items)} —à—Ç.\n"
                new_message += f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order.get('id')}"
                valid_image_urls = [item['image_url'] for item in new_items if item['image_url']]
                await send_telegram_notification(config.chat_id, new_message, valid_image_urls)


async def schedule_daily_reports():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    session = get_session()
    configs = session.query(UserConfig).all()
    session.close()
    now = datetime.now(timezone('Asia/Tashkent'))
    for config in configs:
        if now.time().strftime("%H:%M") == config.report_time.strftime("%H:%M"):
            await send_daily_report(config.chat_id, config.api_key)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)

    scheduler = AsyncIOScheduler(timezone=timezone('Asia/Tashkent'))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    scheduler.add_job(
        periodic_check,
        "interval",
        seconds=CHECK_INTERVAL
    )
    scheduler.add_job(
        clear_product_ids,
        "interval",
        hours=48  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤
    )
    scheduler.add_job(
        schedule_daily_reports,
        "cron",
        hour=16, minute=0  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 16:00 –ø–æ —Ç–∞—à–∫–µ–Ω—Ç—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    )
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
